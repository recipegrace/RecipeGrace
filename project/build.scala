import sbt._
import Keys._
import org.scalatra.sbt._
import org.scalatra.sbt.PluginKeys._
import com.mojolly.scalate.ScalatePlugin._
import ScalateKeys._
import com.earldouglas.xsbtwebplugin._
import sbt.Keys._
import com.earldouglas.xsbtwebplugin.PluginKeys._
import com.earldouglas.xsbtwebplugin.WebPlugin._



object RecipegraceBuild extends Build {
  val Organization = "angie.jacob"
  val Name = "RecipeGrace"
  val Version = "0.1.0-SNAPSHOT"
  val ScalaVersion = "2.10.3"
  val ScalatraVersion = "2.2.2" 

  lazy val project = Project (
    "recipegrace",
    file("."),
    settings = Defaults.defaultSettings ++ ScalatraPlugin.scalatraWithJRebel ++ scalateSettings 
	++ Seq(
      organization := Organization,
      name := Name,
      version := Version,
      scalaVersion := ScalaVersion,
      resolvers += Classpaths.typesafeReleases,
      libraryDependencies ++= Seq(
        "org.scalatra" %% "scalatra" % ScalatraVersion,
        "org.scalatra" %% "scalatra-scalate" % ScalatraVersion,
        "org.scalatra" %% "scalatra-specs2" % ScalatraVersion % "test",
        "ch.qos.logback" % "logback-classic" % "1.0.6" % "runtime",
        //"org.eclipse.jetty" % "jetty-webapp" % "8.1.8.v20121106" % "container",
         "org.apache.tomcat.embed" % "tomcat-embed-core"         % "7.0.22" % "container",
  "org.apache.tomcat.embed" % "tomcat-embed-logging-juli" % "7.0.22" % "container",
  "org.apache.tomcat.embed" % "tomcat-embed-jasper"       % "7.0.22" % "container",
	//"org.eclipse.jetty.orbit" % "javax.servlet" % "3.0.0.v201112011016" % "container;provided;test" artifacts (Artifact("javax.servlet", "jar", "jar"))
"javax.servlet" % "javax.servlet-api" % "3.0.1" % "provided"      
),
      scalateTemplateConfig in Compile <<= (sourceDirectory in Compile){ base =>
        Seq(
          TemplateConfig(
            base / "webapp" / "WEB-INF" / "templates",
            Seq.empty,  /* default imports should be added here */
            Seq(
              Binding("context", "_root_.org.scalatra.scalate.ScalatraRenderContext", importMembers = true, isImplicit = true)
            ),  /* add extra bindings here */
            Some("templates")
          )
        )
      }
      
      )
        ++ webSettings ++ Seq(
        // Overrides the default context path used for this project. By
        // default, the context path is "/", but here we're overriding it
        // so that the application is available under "/havalo" instead.
        apps in container.Configuration <<= (deployment in DefaultConf) map {
          d => Seq("/RecipeGrace" -> d)
        }
	/*,
        warPostProcess in Compile <<= (target) map {
          // Ensures the src/main/webapp/WEB-INF/work directory is NOT included
          // in the packaged WAR file. This is a temporary directory used by
          // the Havalo application and servlet container in development that
          // should not be shipped with a build.
          (target) => { () => {
          val webinf = target / "webapp" / "WEB-INF"
          IO.delete(webinf / "work") // recursive
          IO.delete(webinf / "classes") // recursive
          }}
        },
        // Change the location of the packaged WAR file as generated by the
        // xsbt-web-plugin.
        artifactPath in (Compile, packageWar) ~= { defaultPath =>
          file("dist") / defaultPath.getName
        }
	*/
      )
  )
}
